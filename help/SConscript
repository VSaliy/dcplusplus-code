Import('dev')
env = dev.env.Clone()

# generate cshelp.h and cshelp.txt from all HTML files in the current folder
# cshelp.h is included in resource.h, which in turn is included in the DC++
# source; hence, we build it even when the help file is not being built.
from gen_cshelp import gen_cshelp
cshelp_targets = ['cshelp.h', 'cshelp.txt']
env.Ignore(cshelp_targets, ['changelog.html', 'compile.html'])
cshelp_sources = Glob('*.html', strings = 1)
if 'changelog.html' in cshelp_sources:
	cshelp_sources.remove('changelog.html')
if 'compile.html' in cshelp_sources:
	cshelp_sources.remove('compile.html')
env.Command(cshelp_targets, cshelp_sources, Action(gen_cshelp, 'Building context-sensitive help files'))
env.Depends('resource.h', 'cshelp.h')

if not env['help']:
	Return()

# generate changelog.html
from gen_changelog import gen_changelog
env.Command('changelog.html', ['#/changelog.txt', 'template.html'], Action(gen_changelog, 'Building changelog.html'))

# generate compile.html
from gen_compile import gen_compile
env.Command('compile.html', ['#/Compile.txt', 'template.html'], Action(gen_compile, 'Building compile.html'))

# the following is inspired by the NSIS build system

chm_builder = Builder(
	action = [
		Copy('users.bmp', '../res/users.bmp'),
		Action('hhc DCPlusPlus.hhp > hhc.log', 'Building the help file'),
		Delete('users.bmp')
	], chdir = 'help'
)
env.Append(BUILDERS = {'CHMBuild' : chm_builder})

# fix hhc.exe reverse return value - UGLY
old_spawn = env['SPAWN']
def new_spawn(*args, **kw):
	result = old_spawn(*args, **kw)
	if 'hhc' in args[3]:
		return not result
	else:
		return result
env['SPAWN'] = new_spawn

# define which files can trigger a help rebuild
chm_sources = Glob('*.html')
chm_sources.append('cshelp.h')
chm_sources.append('cshelp.txt')
chm_sources.append('DCPlusPlus.hhp')
chm_sources.append('external.png')
chm_sources.append('index.hhk')
chm_sources.append('logo.jpg')
chm_sources.append('office11.css')
chm_sources.append('resource.h')
chm_sources.append('style.css')
chm_sources.append('toc.hhc')

# build CHM
ret = env.CHMBuild('#/build/help/DCPlusPlus.chm', chm_sources)
Return('ret')
