Import('dev source_path')


def runUnitTest(env, target, source):
    import subprocess
    app = str(source[0].abspath)
    if not subprocess.call(app):
        open(str(target[0]), 'w').write("PASSED\n")

env, target, sources = dev.prepare_build(
    source_path,
    'gtest',
    source_glob="*.cpp",
    in_bin=False
)

# not every lib is strictly required here but we want to match the main program
# as much as possible.

dev.add_boost(env)
dev.add_crashlog(env)
dev.add_dcpp(env)
dev.add_intl(env)
dev.add_openssl(env)

dev.force_console(env)

if dev.is_win32():
    env.Append(LIBS=[
        'comctl32', 'comdlg32', 'oleaut32', 'shlwapi', 'uuid', 'uxtheme',
        'winmm', 'wtsapi32'
    ])

if 'HAVE_HTMLHELP_H' in env['CPPDEFINES']:
    env.Append(LIBS=['htmlhelp'])

if env['msvcproj']:
    ret = dev.build_lib(env, target, sources, dev.cpp_lib)
else:
    ret = dev.build_program(env, target, sources)
    ret = env.Command(
        dev.get_target(source_path, 'gtest.passed', in_bin=False),
        ret[0].abspath,
        runUnitTest
    )

env.Help("\nYou can run the test suite by running 'scons test'\n")

Return('ret')
